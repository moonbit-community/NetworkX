package "smallbearrr/NetworkX/network"

import(
  "moonbitlang/core/hashmap"
)

// Values
fn edge_count[N, E](Graph[N, E]) -> Int

fn find_edge[N, E](Graph[N, E], NodeIndex, NodeIndex) -> EdgeIndex?

fn find_edge_undirected[N, E](Graph[N, E], NodeIndex, NodeIndex) -> EdgeIndex?

fn index(NodeIndex) -> Int

fn node_count[N, E](Graph[N, E]) -> Int

fn remove_edge[N, E](Graph[N, E], EdgeIndex) -> E?

// Types and methods
type Bfs
impl Bfs {
  new[N, E](Graph[N, E], NodeIndex) -> Self
  next[N, E](Self, Graph[N, E]) -> NodeIndex?
}

type CycleDetected
impl Show for CycleDetected

type Dfs
impl Dfs {
  empty[N, E](Graph[N, E]) -> Self
  from_parts(Array[NodeIndex], VisitMap) -> Self
  move_to(Self, NodeIndex) -> Unit
  new[N, E](Graph[N, E], NodeIndex) -> Self
  next[N, E](Self, Graph[N, E]) -> NodeIndex?
  reset(Self) -> Unit
}

type DfsPostOrder
impl DfsPostOrder {
  move_to(Self, NodeIndex) -> Unit
  new[N, E](Graph[N, E], NodeIndex) -> Self
  next[N, E](Self, Graph[N, E]) -> NodeIndex?
  reset(Self) -> Unit
}

type Edge[E]
impl[E : Eq] Eq for Edge[E]
impl[E : Hash] Hash for Edge[E]
impl[E : Show] Show for Edge[E]

type EdgeIndex
impl Eq for EdgeIndex
impl Hash for EdgeIndex
impl Show for EdgeIndex

type Graph[N, E]
impl Graph {
  add_edge[N, E : Default](Self[N, E], NodeIndex, NodeIndex, weight? : E) -> EdgeIndex
  add_node[N : Default, E](Self[N, E], weight? : N) -> NodeIndex
  capacity[N, E](Self[N, E]) -> (Int, Int)
  dijkstra[N, E : Compare + Add + Default](Self[N, E], NodeIndex) -> @hashmap.T[NodeIndex, E]!
  edge_count[N, E](Self[N, E]) -> Int
  edges[N, E : Eq + Hash](Self[N, E], NodeIndex) -> Iter[Edge[E]]
  extend_with_edges[N : Default + Eq + Hash, E : Default](Self[N, E], Iter[(N, N)]) -> Unit
  extend_with_edges_with_weights[N : Default + Eq + Hash, E : Default](Self[N, E], Iter[(N, N, E)]) -> Unit
  find_edge[N, E](Self[N, E], NodeIndex, NodeIndex) -> EdgeIndex?
  find_edge_undirected[N, E](Self[N, E], NodeIndex, NodeIndex) -> EdgeIndex?
  from_edges[N : Default + Eq + Hash, E : Default](Iter[(N, N)], directed~ : Bool = ..) -> Self[N, E]
  from_edges_with_weights[N : Default + Eq + Hash, E : Default](Iter[(N, N, E)], directed~ : Bool = ..) -> Self[N, E]
  is_cyclic[N, E](Self[N, E]) -> Bool
  is_directed[N, E](Self[N, E]) -> Bool
  neighbors[N, E](Self[N, E], NodeIndex) -> Iter[NodeIndex]
  new[N, E](directed~ : Bool = ..) -> Self[N, E]
  node_count[N, E](Self[N, E]) -> Int
  remove_edge[N, E](Self[N, E], EdgeIndex) -> E?
  try_add_edge[N, E : Default](Self[N, E], NodeIndex, NodeIndex, weight? : E) -> EdgeIndex!
  try_add_node[N : Default, E](Self[N, E], weight? : N) -> NodeIndex!
  with_capacity[N, E](Int, Int, directed~ : Bool = ..) -> Self[N, E]
}
impl[N : Show, E : Show] Show for Graph[N, E]

type Lca[N, E]
impl Lca {
  new[N, E](Graph[N, E], NodeIndex) -> Self[N, E]!CycleDetected
  query[N, E](Self[N, E], NodeIndex, NodeIndex) -> NodeIndex
  reset[N, E](Self[N, E], root? : NodeIndex) -> Unit
}

type NodeIndex
impl NodeIndex {
  index(Self) -> Int
}
impl Compare for NodeIndex
impl Eq for NodeIndex
impl Hash for NodeIndex
impl Show for NodeIndex

type Topo
impl Topo {
  empty[N, E](Graph[N, E]) -> Self
  new[N, E](Graph[N, E]) -> Self
  next[N, E](Self, Graph[N, E]) -> NodeIndex?
}

type VisitMap
impl VisitMap {
  new() -> Self
}

// Type aliases

// Traits

